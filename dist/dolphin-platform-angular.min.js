!function n(e,t,r){function o(a,l){if(!t[a]){if(!e[a]){var u="function"==typeof require&&require;if(!l&&u)return u(a,!0);if(i)return i(a,!0);var d=new Error("Cannot find module '"+a+"'");throw d.code="MODULE_NOT_FOUND",d}var f=t[a]={exports:{}};e[a][0].call(f.exports,function(n){var t=e[a][1][n];return o(t?t:n)},f,f.exports,n,e,t,r)}return t[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(n,e,t){"use strict";angular.module("DolphinPlatform",[]),angular.module("DolphinPlatform").provider("$dolphinConfig",[function(){var n={};this.configure=function(e){n=e},this.$get=function(){return n}}]),angular.module("DolphinPlatform").factory("dolphin",function(){return dolphin}),angular.module("DolphinPlatform").factory("vanillaClientContext",["dolphin","$dolphinConfig","$window","$log",function(n,e,t,r){var o=n.connect(e.DOLPHIN_URL,e);return r.debug("Basic Dolphin Platform context created"),o}]),angular.module("DolphinPlatform").factory("dolphinBinding",["$rootScope","$timeout","vanillaClientContext","$log",function(n,e,t,r){n.waitingForGlobalDolphinApply=!1,n.applyInAngular=function(){n.waitingForGlobalDolphinApply||(n.waitingForGlobalDolphinApply=!0,e(function(){n.waitingForGlobalDolphinApply=!1,r.debug("Angular apply is called by Dolphin Platform"),n.$apply()},100))};var o={injectArray:function(n,e,t){n.splice.apply(n,[e,0].concat(t))},exists:function(n){return"undefined"!=typeof n&&null!==n},deepEqual:function(n,e){if(n===e||!this.exists(n)&&!this.exists(e))return!0;if(this.exists(n)!==this.exists(e))return!1;var t=n.length;if(e.length!==t)return!1;for(var r=0;r<t;r++)if(n[r]!==e[r])return!1;return!0},init:function(n){n.onAdded(o.onBeanAddedHandler),n.onRemoved(o.onBeanRemovedHandler),n.onBeanUpdate(o.onBeanUpdateHandler),n.onArrayUpdate(o.onArrayUpdateHandler),r.debug("Dolphin Platform binding listeners for Angular registered")},watchAttribute:function(e,o){r.debug("Added Angular listener for property "+o+" of bean "+JSON.stringify(e)),n.$watch(function(){return e[o]},function(n,i){r.debug("Value "+o+" of bean "+JSON.stringify(e)+" changed from "+i+" to "+n),t.beanManager.classRepository.notifyBeanChange(e,o,n)})},onBeanAddedHandler:function(e){r.debug("Bean "+JSON.stringify(e)+" added");for(var t in e)o.watchAttribute(e,t);n.applyInAngular()},onBeanRemovedHandler:function(e){r.debug("Bean "+JSON.stringify(e)+" removed"),n.applyInAngular()},onBeanUpdateHandler:function(e,t,i,a){var l=!0;for(var u in e)u===t&&(l=!1);return l&&(r.debug("Value "+t+" was added to bean "+JSON.stringify(e)),o.watchAttribute(e,t)),a===i?void r.debug("Received bean update for property "+t+" without any change"):(r.debug("Bean update for property "+t+' with new value "'+i+'"'),e[t]=i,void n.applyInAngular())},onArrayUpdateHandler:function(e,t,i,a,l){var u=e[t],d=u.slice(i,i+a);if(!o.deepEqual(l,d))if(r.debug("Array update for property "+t+" starting at index "+i+" with "+JSON.stringify(l)),"undefined"==typeof l)u.splice(i,a),n.applyInAngular();else{o.injectArray(u,i,l);for(e in l)for(var f in e)o.watchAttribute(e,f);n.applyInAngular()}}};return r.debug("Dolphin Platform binding created"),o}]),angular.module("DolphinPlatform").factory("clientContext",["vanillaClientContext","dolphinBinding","$window","$log",function(n,e,t,r){var o={createController:function(e,t){return n.createController(t).then(function(n){return r.debug("Creating Dolphin Platform controller "+t),e.$on("$destroy",function(){r.debug("Destroying Dolphin Platform controller "+t),n.destroy()}),e.model=n.model,n})},disconnect:function(){n.disconnect(),r.debug("Dolphin Platform context disconnected")}};return e.init(n.beanManager),t.onbeforeunload=o.disconnect,r.debug("Dolphin Platform context created"),o}])},{}]},{},[1]);
//# sourceMappingURL=dolphin-platform-angular.min.js.map
