{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/dolphin-platform-angular.js","dolphin-platform-angular.min.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","_dereq_","module","angular","provider","$cfg","this","configure","cfg","$get","factory","dolphin","$dolphinConfig","$window","$log","vanillaClientContext","connect","DOLPHIN_URL","debug","$rootScope","$timeout","waitingForGlobalDolphinApply","applyInAngular","$apply","dolphinBinding","injectArray","baseArray","startIndex","insertArray","splice","apply","concat","exists","object","deepEqual","array1","array2","init","beanManager","onAdded","onBeanAddedHandler","onRemoved","onBeanRemovedHandler","onBeanUpdate","onBeanUpdateHandler","onArrayUpdate","onArrayUpdateHandler","watchAttribute","bean","attribute","JSON","stringify","$watch","newValue","oldValue","classRepository","notifyBeanChange","attr","propertyName","newProperty","index","count","newElements","array","oldElements","slice","clientContext","createController","scope","controllerName","then","controllerProxy","$on","destroy","model","disconnect","onbeforeunload"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAC,EAAAC,EAAAL,GCCA,YACAM,SAAAD,OAAA,sBAEAC,QAAAD,OAAA,mBAAAE,SAAA,kBAAA,WAEA,GAAAC,KACAC,MAAAC,UAAA,SAAAC,GACAH,EAAAG,GAGAF,KAAAG,KAAA,WACA,MAAAJ,OAKAF,QAAAD,OAAA,mBAAAQ,QAAA,UAAA,WACA,MAAAC,WAGAR,QAAAD,OAAA,mBAAAQ,QAAA,wBAAA,UAAA,iBAAA,UAAA,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAJ,EAAAK,QAAAJ,EAAAK,YAAAL,EAEA,OADAE,GAAAI,MAAA,0CACAH,KAGAZ,QAAAD,OAAA,mBAAAQ,QAAA,kBAAA,aAAA,WAAA,uBAAA,OAAA,SAAAS,EAAAC,EAAAL,EAAAD,GAEAK,EAAAE,8BAAA,EAEAF,EAAAG,eAAA,WACAH,EAAAE,+BACAF,EAAAE,8BAAA,EACAD,EAAA,WACAD,EAAAE,8BAAA,EACAP,EAAAI,MAAA,+CACAC,EAAAI,UACA,MAIA,IAAAC,IAEAC,YAAA,SAAAC,EAAAC,EAAAC,GACAF,EAAAG,OAAAC,MAAAJ,GAAAC,EAAA,GAAAI,OAAAH,KAEAI,OAAA,SAAAC,GACA,MAAA,mBAAAA,IAAA,OAAAA,GAEAC,UAAA,SAAAC,EAAAC,GACA,GAAAD,IAAAC,IAAA9B,KAAA0B,OAAAG,KAAA7B,KAAA0B,OAAAI,GACA,OAAA,CAEA,IAAA9B,KAAA0B,OAAAG,KAAA7B,KAAA0B,OAAAI,GACA,OAAA,CAEA,IAAAnD,GAAAkD,EAAApC,MACA,IAAAqC,EAAArC,SAAAd,EACA,OAAA,CAEA,KAAA,GAAAO,GAAA,EAAAA,EAAAP,EAAAO,IACA,GAAA2C,EAAA3C,KAAA4C,EAAA5C,GACA,OAAA,CAGA,QAAA,GAEA6C,KAAA,SAAAC,GACAA,EAAAC,QAAAf,EAAAgB,oBACAF,EAAAG,UAAAjB,EAAAkB,sBACAJ,EAAAK,aAAAnB,EAAAoB,qBACAN,EAAAO,cAAArB,EAAAsB,sBAEAhC,EAAAI,MAAA,8DAEA6B,eAAA,SAAAC,EAAAC,GACAnC,EAAAI,MAAA,uCAAA+B,EAAA,YAAAC,KAAAC,UAAAH,IACA7B,EAAAiC,OACA,WAAA,MAAAJ,GAAAC,IACA,SAAAI,EAAAC,GACAxC,EAAAI,MAAA,SAAA+B,EAAA,YAAAC,KAAAC,UAAAH,GAAA,iBAAAM,EAAA,OAAAD,GACAtC,EAAAuB,YAAAiB,gBAAAC,iBAAAR,EAAAC,EAAAI,MAIAb,mBAAA,SAAAQ,GACAlC,EAAAI,MAAA,QAAAgC,KAAAC,UAAAH,GAAA,SAEA,KAAA,GAAAS,KAAAT,GACAxB,EAAAuB,eAAAC,EAAAS,EAGAtC,GAAAG,kBAEAoB,qBAAA,SAAAM,GACAlC,EAAAI,MAAA,QAAAgC,KAAAC,UAAAH,GAAA,YACA7B,EAAAG,kBAEAsB,oBAAA,SAAAI,EAAAU,EAAAL,EAAAC,GACA,GAAAK,IAAA,CACA,KAAA,GAAAF,KAAAT,GACAS,IAAAC,IACAC,GAAA,EASA,OALAA,KACA7C,EAAAI,MAAA,SAAAwC,EAAA,sBAAAR,KAAAC,UAAAH,IACAxB,EAAAuB,eAAAC,EAAAU,IAGAJ,IAAAD,MACAvC,GAAAI,MAAA,qCAAAwC,EAAA,wBAIA5C,EAAAI,MAAA,4BAAAwC,EAAA,oBAAAL,EAAA,KAEAL,EAAAU,GAAAL,MACAlC,GAAAG,mBAEAwB,qBAAA,SAAAE,EAAAU,EAAAE,EAAAC,EAAAC,GACA,GAAAC,GAAAf,EAAAU,GACAM,EAAAD,EAAAE,MAAAL,EAAAA,EAAAC,EACA,KAAArC,EAAAU,UAAA4B,EAAAE,GAMA,GAFAlD,EAAAI,MAAA,6BAAAwC,EAAA,sBAAAE,EAAA,SAAAV,KAAAC,UAAAW,IAEA,mBAAAA,GACAC,EAAAlC,OAAA+B,EAAAC,GACA1C,EAAAG,qBACA,CACAE,EAAAC,YAAAsC,EAAAH,EAAAE,EAEA,KAAAd,IAAAc,GACA,IAAA,GAAAL,KAAAT,GACAxB,EAAAuB,eAAAC,EAAAS,EAIAtC,GAAAG,mBAOA,OAFAR,GAAAI,MAAA,oCAEAM,KAIArB,QAAAD,OAAA,mBAAAQ,QAAA,iBAAA,uBAAA,iBAAA,UAAA,OAAA,SAAAK,EAAAS,EAAAX,EAAAC,GACA,GAAAoD,IACAC,iBAAA,SAAAC,EAAAC,GACA,MAAAtD,GAAAoD,iBAAAE,GAAAC,KAAA,SAAAC,GAOA,MANAzD,GAAAI,MAAA,wCAAAmD,GACAD,EAAAI,IAAA,WAAA,WACA1D,EAAAI,MAAA,0CAAAmD,GACAE,EAAAE,YAEAL,EAAAM,MAAAH,EAAAG,MACAH,KAGAI,WAAA,WACA5D,EAAA4D,aACA7D,EAAAI,MAAA,0CAUA,OANAM,GAAAa,KAAAtB,EAAAuB,aAEAzB,EAAA+D,eAAAV,EAAAS,WAEA7D,EAAAI,MAAA,oCAEAgD,eCIW","file":"dolphin-platform-angular.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*global dolphin*/\n'use strict';\nangular.module('DolphinPlatform', []);\n\nangular.module('DolphinPlatform').provider('$dolphinConfig', [function () {\n\n    var $cfg = {};\n    this.configure = function (cfg) {\n        $cfg = cfg;\n    };\n\n    this.$get = function () {\n        return $cfg;\n    };\n\n}]);\n\nangular.module('DolphinPlatform').factory('dolphin', function () {\n    return dolphin;\n});\n\nangular.module('DolphinPlatform').factory('vanillaClientContext', ['dolphin', '$dolphinConfig', '$window', '$log', function (dolphin, $dolphinConfig, $window, $log) {\n    var vanillaClientContext = dolphin.connect($dolphinConfig.DOLPHIN_URL, $dolphinConfig);\n    $log.debug('Basic Dolphin Platform context created');\n    return vanillaClientContext;\n}]);\n\nangular.module('DolphinPlatform').factory('dolphinBinding', ['$rootScope', '$timeout', 'vanillaClientContext', '$log', function ($rootScope, $timeout, vanillaClientContext, $log) {\n\n    $rootScope.waitingForGlobalDolphinApply = false;\n\n    $rootScope.applyInAngular = function () {\n        if (!$rootScope.waitingForGlobalDolphinApply) {\n            $rootScope.waitingForGlobalDolphinApply = true;\n            $timeout(function () {\n                $rootScope.waitingForGlobalDolphinApply = false;\n                $log.debug('Angular apply is called by Dolphin Platform');\n                $rootScope.$apply();\n            }, 100);\n        }\n    };\n\n    var dolphinBinding = {\n\n        injectArray: function (baseArray, startIndex, insertArray) {\n            baseArray.splice.apply(baseArray, [startIndex, 0].concat(insertArray));\n        },\n        exists: function (object) {\n            return typeof object !== 'undefined' && object !== null;\n        },\n        deepEqual: function (array1, array2) {\n            if (array1 === array2 || (!this.exists(array1) && !this.exists(array2))) {\n                return true;\n            }\n            if (this.exists(array1) !== this.exists(array2)) {\n                return false;\n            }\n            var n = array1.length;\n            if (array2.length !== n) {\n                return false;\n            }\n            for (var i = 0; i < n; i++) {\n                if (array1[i] !== array2[i]) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        init: function (beanManager) {\n            beanManager.onAdded(dolphinBinding.onBeanAddedHandler);\n            beanManager.onRemoved(dolphinBinding.onBeanRemovedHandler);\n            beanManager.onBeanUpdate(dolphinBinding.onBeanUpdateHandler);\n            beanManager.onArrayUpdate(dolphinBinding.onArrayUpdateHandler);\n\n            $log.debug('Dolphin Platform binding listeners for Angular registered');\n        },\n        watchAttribute: function (bean, attribute) {\n            $log.debug('Added Angular listener for property ' + attribute +  ' of bean ' + JSON.stringify(bean));\n            $rootScope.$watch(\n                function() { return bean[attribute]; },\n                function(newValue, oldValue) {\n                    $log.debug('Value ' + attribute + ' of bean ' + JSON.stringify(bean) +' changed from '+ oldValue+ ' to ' + newValue);\n                    vanillaClientContext.beanManager.classRepository.notifyBeanChange(bean, attribute, newValue);\n                }\n            );\n        },\n        onBeanAddedHandler: function(bean) {\n            $log.debug('Bean ' + JSON.stringify(bean) + ' added');\n\n            for(var attr in bean) {\n                dolphinBinding.watchAttribute(bean, attr);\n            }\n\n            $rootScope.applyInAngular();\n        },\n        onBeanRemovedHandler: function(bean) {\n            $log.debug('Bean ' + JSON.stringify(bean) + ' removed');\n            $rootScope.applyInAngular();\n        },\n        onBeanUpdateHandler: function (bean, propertyName, newValue, oldValue) {\n            var newProperty = true;\n            for(var attr in bean) {\n                if(attr === propertyName) {\n                    newProperty = false;\n                }\n            }\n\n            if(newProperty) {\n                $log.debug('Value ' + propertyName + ' was added to bean ' + JSON.stringify(bean));\n                dolphinBinding.watchAttribute(bean, propertyName);\n            }\n\n            if (oldValue === newValue) {\n                $log.debug('Received bean update for property ' + propertyName + ' without any change');\n                return;\n            }\n\n            $log.debug('Bean update for property ' + propertyName + ' with new value \"' + newValue + '\"');\n\n            bean[propertyName] = newValue;\n            $rootScope.applyInAngular();\n        },\n        onArrayUpdateHandler: function (bean, propertyName, index, count, newElements) {\n            var array = bean[propertyName];\n            var oldElements = array.slice(index, index + count);\n            if (dolphinBinding.deepEqual(newElements, oldElements)) {\n                return;\n            }\n\n            $log.debug('Array update for property ' + propertyName + ' starting at index ' + index + ' with ' + JSON.stringify(newElements));\n\n            if (typeof newElements === 'undefined') {\n                array.splice(index, count);\n                $rootScope.applyInAngular();\n            } else {\n                dolphinBinding.injectArray(array, index, newElements);\n\n                for(bean in newElements) {\n                    for(var attr in bean) {\n                        dolphinBinding.watchAttribute(bean, attr);\n                    }\n                }\n\n                $rootScope.applyInAngular();\n            }\n        }\n    };\n\n    $log.debug('Dolphin Platform binding created');\n\n    return dolphinBinding;\n\n}]);\n\nangular.module('DolphinPlatform').factory('clientContext', ['vanillaClientContext', 'dolphinBinding', '$window', '$log', function (vanillaClientContext, dolphinBinding, $window, $log) {\n    var clientContext = {\n        createController: function (scope, controllerName) {\n            return vanillaClientContext.createController(controllerName).then(function (controllerProxy) {\n                $log.debug('Creating Dolphin Platform controller ' + controllerName);\n                scope.$on('$destroy', function () {\n                    $log.debug('Destroying Dolphin Platform controller ' + controllerName);\n                    controllerProxy.destroy();\n                });\n                scope.model = controllerProxy.model;\n                return controllerProxy;\n            });\n        },\n        disconnect: function () {\n            vanillaClientContext.disconnect();\n            $log.debug('Dolphin Platform context disconnected');\n        }\n    };\n\n    dolphinBinding.init(vanillaClientContext.beanManager);\n\n    $window.onbeforeunload = clientContext.disconnect;\n\n    $log.debug('Dolphin Platform context created');\n\n    return clientContext;\n}]);\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n/*global dolphin*/\n'use strict';\nangular.module('DolphinPlatform', []);\n\nangular.module('DolphinPlatform').provider('$dolphinConfig', [function () {\n\n    var $cfg = {};\n    this.configure = function (cfg) {\n        $cfg = cfg;\n    };\n\n    this.$get = function () {\n        return $cfg;\n    };\n\n}]);\n\nangular.module('DolphinPlatform').factory('dolphin', function () {\n    return dolphin;\n});\n\nangular.module('DolphinPlatform').factory('vanillaClientContext', ['dolphin', '$dolphinConfig', '$window', '$log', function (dolphin, $dolphinConfig, $window, $log) {\n    var vanillaClientContext = dolphin.connect($dolphinConfig.DOLPHIN_URL, $dolphinConfig);\n    $log.debug('Basic Dolphin Platform context created');\n    return vanillaClientContext;\n}]);\n\nangular.module('DolphinPlatform').factory('dolphinBinding', ['$rootScope', '$timeout', 'vanillaClientContext', '$log', function ($rootScope, $timeout, vanillaClientContext, $log) {\n\n    $rootScope.waitingForGlobalDolphinApply = false;\n\n    $rootScope.applyInAngular = function () {\n        if (!$rootScope.waitingForGlobalDolphinApply) {\n            $rootScope.waitingForGlobalDolphinApply = true;\n            $timeout(function () {\n                $rootScope.waitingForGlobalDolphinApply = false;\n                $log.debug('Angular apply is called by Dolphin Platform');\n                $rootScope.$apply();\n            }, 100);\n        }\n    };\n\n    var dolphinBinding = {\n\n        injectArray: function (baseArray, startIndex, insertArray) {\n            baseArray.splice.apply(baseArray, [startIndex, 0].concat(insertArray));\n        },\n        exists: function (object) {\n            return typeof object !== 'undefined' && object !== null;\n        },\n        deepEqual: function (array1, array2) {\n            if (array1 === array2 || (!this.exists(array1) && !this.exists(array2))) {\n                return true;\n            }\n            if (this.exists(array1) !== this.exists(array2)) {\n                return false;\n            }\n            var n = array1.length;\n            if (array2.length !== n) {\n                return false;\n            }\n            for (var i = 0; i < n; i++) {\n                if (array1[i] !== array2[i]) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        init: function (beanManager) {\n            beanManager.onAdded(dolphinBinding.onBeanAddedHandler);\n            beanManager.onRemoved(dolphinBinding.onBeanRemovedHandler);\n            beanManager.onBeanUpdate(dolphinBinding.onBeanUpdateHandler);\n            beanManager.onArrayUpdate(dolphinBinding.onArrayUpdateHandler);\n\n            $log.debug('Dolphin Platform binding listeners for Angular registered');\n        },\n        watchAttribute: function (bean, attribute) {\n            $log.debug('Added Angular listener for property ' + attribute +  ' of bean ' + JSON.stringify(bean));\n            $rootScope.$watch(\n                function() { return bean[attribute]; },\n                function(newValue, oldValue) {\n                    $log.debug('Value ' + attribute + ' of bean ' + JSON.stringify(bean) +' changed from '+ oldValue+ ' to ' + newValue);\n                    vanillaClientContext.beanManager.classRepository.notifyBeanChange(bean, attribute, newValue);\n                }\n            );\n        },\n        onBeanAddedHandler: function(bean) {\n            $log.debug('Bean ' + JSON.stringify(bean) + ' added');\n\n            for(var attr in bean) {\n                dolphinBinding.watchAttribute(bean, attr);\n            }\n\n            $rootScope.applyInAngular();\n        },\n        onBeanRemovedHandler: function(bean) {\n            $log.debug('Bean ' + JSON.stringify(bean) + ' removed');\n            $rootScope.applyInAngular();\n        },\n        onBeanUpdateHandler: function (bean, propertyName, newValue, oldValue) {\n            var newProperty = true;\n            for(var attr in bean) {\n                if(attr === propertyName) {\n                    newProperty = false;\n                }\n            }\n\n            if(newProperty) {\n                $log.debug('Value ' + propertyName + ' was added to bean ' + JSON.stringify(bean));\n                dolphinBinding.watchAttribute(bean, propertyName);\n            }\n\n            if (oldValue === newValue) {\n                $log.debug('Received bean update for property ' + propertyName + ' without any change');\n                return;\n            }\n\n            $log.debug('Bean update for property ' + propertyName + ' with new value \"' + newValue + '\"');\n\n            bean[propertyName] = newValue;\n            $rootScope.applyInAngular();\n        },\n        onArrayUpdateHandler: function (bean, propertyName, index, count, newElements) {\n            var array = bean[propertyName];\n            var oldElements = array.slice(index, index + count);\n            if (dolphinBinding.deepEqual(newElements, oldElements)) {\n                return;\n            }\n\n            $log.debug('Array update for property ' + propertyName + ' starting at index ' + index + ' with ' + JSON.stringify(newElements));\n\n            if (typeof newElements === 'undefined') {\n                array.splice(index, count);\n                $rootScope.applyInAngular();\n            } else {\n                dolphinBinding.injectArray(array, index, newElements);\n\n                for(bean in newElements) {\n                    for(var attr in bean) {\n                        dolphinBinding.watchAttribute(bean, attr);\n                    }\n                }\n\n                $rootScope.applyInAngular();\n            }\n        }\n    };\n\n    $log.debug('Dolphin Platform binding created');\n\n    return dolphinBinding;\n\n}]);\n\nangular.module('DolphinPlatform').factory('clientContext', ['vanillaClientContext', 'dolphinBinding', '$window', '$log', function (vanillaClientContext, dolphinBinding, $window, $log) {\n    var clientContext = {\n        createController: function (scope, controllerName) {\n            return vanillaClientContext.createController(controllerName).then(function (controllerProxy) {\n                $log.debug('Creating Dolphin Platform controller ' + controllerName);\n                scope.$on('$destroy', function () {\n                    $log.debug('Destroying Dolphin Platform controller ' + controllerName);\n                    controllerProxy.destroy();\n                });\n                scope.model = controllerProxy.model;\n                return controllerProxy;\n            });\n        },\n        disconnect: function () {\n            vanillaClientContext.disconnect();\n            $log.debug('Dolphin Platform context disconnected');\n        }\n    };\n\n    dolphinBinding.init(vanillaClientContext.beanManager);\n\n    $window.onbeforeunload = clientContext.disconnect;\n\n    $log.debug('Dolphin Platform context created');\n\n    return clientContext;\n}]);\n\n},{}]},{},[1])\n\n"],"sourceRoot":"/source/"}